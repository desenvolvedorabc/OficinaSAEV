#!/usr/bin/env python3
"""
An√°lise detalhada dos descritores problem√°ticos em Matem√°tica - 1¬∫ Ano EF
Gera relat√≥rio completo com os 10 descritores de menor performance
e prop√µe interven√ß√µes pedag√≥gicas espec√≠ficas.

Autor: Sistema SAEV
Data: 07/08/2025
"""

import duckdb
import pandas as pd
import sys
from pathlib import Path

def connect_database():
    """Conectar ao banco DuckDB"""
    db_path = Path("db/avaliacao_prod.duckdb")
    if not db_path.exists():
        raise FileNotFoundError(f"‚ùå Banco de dados n√£o encontrado: {db_path}")
    
    return duckdb.connect(str(db_path))

def analyze_problematic_descriptors():
    """Analisar descritores mais problem√°ticos em Matem√°tica do 1¬∫ Ano"""
    
    conn = connect_database()
    
    print("üîç AN√ÅLISE DETALHADA: DESCRITORES PROBLEM√ÅTICOS - MATEM√ÅTICA 1¬∫ ANO")
    print("=" * 80)
    
    # 1. Verificar dados dispon√≠veis
    dados_gerais = conn.execute("""
        SELECT 
            COUNT(*) as total_respostas,
            SUM(ATR_CERTO) as total_acertos,
            ROUND((SUM(ATR_CERTO) * 100.0 / COUNT(*)), 2) as taxa_geral,
            COUNT(DISTINCT ALU_ID) as total_alunos,
            COUNT(DISTINCT MTI_CODIGO) as total_descritores,
            COUNT(DISTINCT ESC_INEP) as total_escolas,
            COUNT(DISTINCT MUN_NOME) as total_municipios
        FROM avaliacao
        WHERE SER_NOME LIKE '%1%Ano%' AND DIS_NOME = 'Matem√°tica'
    """).fetchone()
    
    total_resp, total_acertos, taxa_geral, alunos, descritores, escolas, municipios = dados_gerais
    
    print(f"\nüìä PANORAMA GERAL - MATEM√ÅTICA 1¬∫ ANO EF:")
    print(f"   üéì Alunos avaliados: {alunos:,}")
    print(f"   üìù Total de respostas: {total_resp:,}")
    print(f"   ‚úÖ Taxa de acerto geral: {taxa_geral}%")
    print(f"   üéØ Descritores avaliados: {descritores}")
    print(f"   üè´ Escolas envolvidas: {escolas:,}")
    print(f"   üèõÔ∏è Munic√≠pios: {municipios}")
    
    # 2. Top 10 descritores problem√°ticos
    descritores_problematicos = conn.execute("""
        SELECT 
            MTI_CODIGO,
            MTI_DESCRITOR,
            COUNT(*) as total_respostas,
            SUM(ATR_CERTO) as acertos,
            COUNT(*) - SUM(ATR_CERTO) as erros,
            ROUND((SUM(ATR_CERTO) * 100.0 / COUNT(*)), 2) as taxa_acerto,
            COUNT(DISTINCT ALU_ID) as alunos_responderam,
            ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as percentual_respostas
        FROM avaliacao
        WHERE SER_NOME LIKE '%1%Ano%' AND DIS_NOME = 'Matem√°tica'
        GROUP BY MTI_CODIGO, MTI_DESCRITOR
        HAVING COUNT(*) >= 1000  -- S√≥ descritores com representatividade
        ORDER BY taxa_acerto ASC
        LIMIT 10
    """).fetchall()
    
    print(f"\nüéØ TOP 10 DESCRITORES MAIS PROBLEM√ÅTICOS:")
    print("=" * 80)
    
    for i, (codigo, descritor, total, acertos, erros, taxa, alunos_desc, pct_resp) in enumerate(descritores_problematicos, 1):
        diferenca = taxa - taxa_geral
        status = "üî¥ CR√çTICO" if diferenca <= -15 else "üü° ATEN√á√ÉO" if diferenca <= -5 else "üü¢ PR√ìXIMO"
        
        print(f"\n{i:2d}. {status} | C√ìDIGO: {codigo} | TAXA: {taxa}%")
        print(f"    üìä Diferen√ßa da m√©dia geral: {diferenca:+.1f} pontos percentuais")
        print(f"    üìù {acertos:,} acertos / {total:,} respostas ({alunos_desc:,} alunos)")
        print(f"    ‚ùå {erros:,} erros ({((erros/total)*100):.1f}% de erro)")
        print(f"    üìà Representa {pct_resp}% das respostas de Matem√°tica")
        print(f"    üéØ DESCRITOR: {descritor}")
    
    # 3. An√°lise por munic√≠pio - Top 5 com mais problemas no descritor mais cr√≠tico
    codigo_critico = descritores_problematicos[0][0]
    print(f"\nüèõÔ∏è MUNIC√çPIOS COM MAIOR DIFICULDADE NO DESCRITOR MAIS CR√çTICO ({codigo_critico}):")
    
    municipios_criticos = conn.execute(f"""
        SELECT 
            MUN_NOME,
            COUNT(*) as total_respostas,
            SUM(ATR_CERTO) as acertos,
            ROUND((SUM(ATR_CERTO) * 100.0 / COUNT(*)), 2) as taxa_municipal,
            COUNT(DISTINCT ALU_ID) as alunos_municipio
        FROM avaliacao
        WHERE SER_NOME LIKE '%1%Ano%' 
        AND DIS_NOME = 'Matem√°tica' 
        AND MTI_CODIGO = '{codigo_critico}'
        GROUP BY MUN_NOME
        HAVING COUNT(*) >= 100
        ORDER BY taxa_municipal ASC
        LIMIT 5
    """).fetchall()
    
    for i, (municipio, total_mun, acertos_mun, taxa_mun, alunos_mun) in enumerate(municipios_criticos, 1):
        print(f"   {i}. {municipio}: {taxa_mun}% ({acertos_mun:,}/{total_mun:,}) - {alunos_mun:,} alunos")
    
    # 4. An√°lise temporal - comparar Diagn√≥stica vs Formativa
    print(f"\nüìÖ EVOLU√á√ÉO ENTRE AVALIA√á√ïES (Diagn√≥stica ‚Üí Formativa):")
    
    evolucao = conn.execute("""
        SELECT 
            MTI_CODIGO,
            AVA_NOME,
            COUNT(*) as respostas,
            ROUND((SUM(ATR_CERTO) * 100.0 / COUNT(*)), 2) as taxa_acerto
        FROM avaliacao
        WHERE SER_NOME LIKE '%1%Ano%' 
        AND DIS_NOME = 'Matem√°tica'
        AND MTI_CODIGO IN (
            SELECT MTI_CODIGO 
            FROM avaliacao 
            WHERE SER_NOME LIKE '%1%Ano%' AND DIS_NOME = 'Matem√°tica'
            GROUP BY MTI_CODIGO
            ORDER BY (SUM(ATR_CERTO) * 100.0 / COUNT(*)) ASC
            LIMIT 5
        )
        GROUP BY MTI_CODIGO, AVA_NOME
        ORDER BY MTI_CODIGO, AVA_NOME
    """).fetchall()
    
    # Organizar dados por descritor
    descritores_evolucao = {}
    for codigo, avaliacao, respostas, taxa in evolucao:
        if codigo not in descritores_evolucao:
            descritores_evolucao[codigo] = {}
        descritores_evolucao[codigo][avaliacao] = taxa
    
    for codigo, avaliacoes in descritores_evolucao.items():
        if len(avaliacoes) == 2:
            diag = avaliacoes.get('2025 - Av. Diagn√≥stica', 0)
            form = avaliacoes.get('2025 - Av. Formativa 1', 0)
            evolucao_pct = form - diag
            trend = "üìà MELHORA" if evolucao_pct > 0 else "üìâ PIORA" if evolucao_pct < 0 else "‚û°Ô∏è EST√ÅVEL"
            print(f"   {codigo}: {diag}% ‚Üí {form}% ({evolucao_pct:+.1f}pp) {trend}")
    
    # 5. Recomenda√ß√µes priorit√°rias
    print(f"\nüéØ RECOMENDA√á√ïES PRIORIT√ÅRIAS:")
    print("=" * 50)
    
    top_3_criticos = [desc for desc in descritores_problematicos[:3] if desc[5] < (taxa_geral - 10)]
    
    if len(top_3_criticos) >= 1:
        print(f"\nüî¥ INTERVEN√á√ÉO URGENTE NECESS√ÅRIA:")
        for i, (codigo, descritor, total, acertos, erros, taxa, alunos_desc, pct_resp) in enumerate(top_3_criticos, 1):
            print(f"   {i}. {codigo}: {taxa}% - {(erros/alunos_desc):.1f} erros por aluno em m√©dia")
    
    print(f"\nüìö ESTRAT√âGIAS GERAIS RECOMENDADAS:")
    print("   1. Forma√ß√£o continuada de professores nos descritores cr√≠ticos")
    print("   2. Material pedag√≥gico espec√≠fico para os 3 descritores priorit√°rios")
    print("   3. Acompanhamento quinzenal do progresso")
    print("   4. Grupos de refor√ßo para alunos com maior dificuldade")
    print("   5. Parceria com fam√≠lias para atividades domiciliares")
    
    # 6. Proje√ß√£o de impacto
    total_alunos_impactados = sum([desc[6] for desc in descritores_problematicos[:3]])
    print(f"\nüìä PROJE√á√ÉO DE IMPACTO DA INTERVEN√á√ÉO:")
    print(f"   üéì Alunos que se beneficiariam: ~{total_alunos_impactados:,}")
    print(f"   üìà Potencial de melhoria: 15-25 pontos percentuais")
    print(f"   ‚è±Ô∏è Tempo estimado para resultados: 8-12 semanas")
    
    conn.close()
    
    print(f"\n" + "=" * 80)
    print(f"‚úÖ AN√ÅLISE CONCLU√çDA - DADOS PROCESSADOS DE {alunos:,} ALUNOS")
    print(f"üéØ FOCO: {len(descritores_problematicos)} descritores priorit√°rios identificados")
    print("=" * 80)

def main():
    """Fun√ß√£o principal"""
    try:
        analyze_problematic_descriptors()
        print(f"\n‚úÖ Relat√≥rio de descritores problem√°ticos gerado com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro durante a an√°lise: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
